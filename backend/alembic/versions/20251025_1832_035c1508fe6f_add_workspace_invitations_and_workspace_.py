"""Add workspace_invitations and workspace_audit_logs tables

Revision ID: 035c1508fe6f
Revises: db5ffb5f8f43
Create Date: 2025-10-25 18:32:09.716727

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '035c1508fe6f'
down_revision = 'db5ffb5f8f43'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create workspace_audit_logs table using raw SQL to avoid enum recreation issues
    op.execute("""
        CREATE TABLE workspace_audit_logs (
            id UUID PRIMARY KEY,
            workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
            actor_id UUID NOT NULL REFERENCES users(id),
            action auditactionenum NOT NULL,
            resource_type VARCHAR(50) NOT NULL,
            resource_id UUID NOT NULL,
            context_data JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
    """)

    # Create indexes for workspace_audit_logs
    op.create_index('ix_workspace_audit_logs_workspace_id', 'workspace_audit_logs', ['workspace_id'])
    op.create_index('ix_workspace_audit_logs_actor_id', 'workspace_audit_logs', ['actor_id'])
    op.create_index('ix_workspace_audit_logs_created_at', 'workspace_audit_logs', ['created_at'])
    op.create_index('ix_workspace_audit_logs_action', 'workspace_audit_logs', ['action'])

    # Create workspace_invitations table using raw SQL
    op.execute("""
        CREATE TABLE workspace_invitations (
            id UUID PRIMARY KEY,
            workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
            email VARCHAR(255) NOT NULL,
            role roleenum NOT NULL,
            token VARCHAR(64) NOT NULL UNIQUE,
            invited_by UUID NOT NULL REFERENCES users(id),
            delivery_status deliverystatusenum NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            expires_at TIMESTAMP WITH TIME ZONE,
            accepted_at TIMESTAMP WITH TIME ZONE,
            CONSTRAINT uq_workspace_email_invitation UNIQUE (workspace_id, email)
        )
    """)

    # Create indexes for workspace_invitations
    op.create_index('ix_workspace_invitations_workspace_id', 'workspace_invitations', ['workspace_id'])
    op.create_index('ix_workspace_invitations_email', 'workspace_invitations', ['email'])
    op.create_index('ix_workspace_invitations_expires_at', 'workspace_invitations', ['expires_at'])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_workspace_invitations_workspace_id', table_name='workspace_invitations')
    op.drop_index('ix_workspace_invitations_expires_at', table_name='workspace_invitations')
    op.drop_index('ix_workspace_invitations_email', table_name='workspace_invitations')
    op.drop_table('workspace_invitations')
    op.drop_index('ix_workspace_audit_logs_workspace_id', table_name='workspace_audit_logs')
    op.drop_index('ix_workspace_audit_logs_created_at', table_name='workspace_audit_logs')
    op.drop_index('ix_workspace_audit_logs_actor_id', table_name='workspace_audit_logs')
    op.drop_index('ix_workspace_audit_logs_action', table_name='workspace_audit_logs')
    op.drop_table('workspace_audit_logs')

    # Drop new enums conditionally (do not drop roleenum as it's still used by workspace_members)
    op.execute("DROP TYPE IF EXISTS deliverystatusenum CASCADE")
    op.execute("DROP TYPE IF EXISTS auditactionenum CASCADE")
    # ### end Alembic commands ###
